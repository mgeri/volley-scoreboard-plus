openapi: 3.0.2
info:
  title: Volley Scoreboard API 
  version: '0.1'
  description: |
    ## Overview

    REST (Representational State Transfer) is the standard way of accessing
    resources over the web.

    It is done through four standard HTTP operations.

      * GET
      * POST (create)
      * PUT (update)
      * DELETE

    The _R_ in _REST_ refers to the representation (or format) of the resource
    being accessed.

    In our case, it is the web-standard [JSON](www.json.org) (JavaScript Object
    Notation) format.


    ### HTTP requests

    Section | Component             | Description
    --------|-----------------------|------------------------------------------------------------------------------------------
    Action  | HTTP operation        | GET - retrieve a resource</br> PUT - replace a resource</br>POST - create a resource</br>DELETE - delete a resource
    Action  | HTTPS                 | The secure web protocol. It ensures that requests are encrypted between the application and the API
    Action  | www.my-sample.com     | The API gateway location
    Action  | /v1                   | The API version 
    Action  | /foos                 | The address of the resource you are accessing
    Request Header | Authorization: Bearer x                  | The authorization session security token x, obtained on login via the /session API
    Request Header | Content-Type: application/json           | Request format type. This should always be set as indicated to json only
    Request Header | Accept: application/json; charset=UTF-8  | Response format type. This should always be set as indicated to json only
    Request Body   | Only required for PUT or POST requests   | JSON format


    ### HTTP Response

    Section | Component                  | Description
    --------|----------------------------|------------------------------------------------------------------------------------------
    HTTP status code  | 200 OK           | Request executed fine.
    HTTP status code  | 201 Created      | Response to a POST that results in a creation.
    HTTP status code  | 204 No Content   | Response to a successful request that won't be returning a body (like a DELETE request).
    HTTP status code  | 400 Bad Request  | The request was invalid or cannot be served. The exact error should be explained in the error payload.
    HTTP status code  | 401 Unauthorized | The request requires an user authentication.
    HTTP status code  | 403 Forbidden    | The server understood the request, but is refusing it or the access is not allowed (authenticated user doesn't have access to the resource).
    HTTP status code  | 404 Not found    | When a non-existent resource is requested.
    HTTP status code  | 422 Unprocessable Entity  | Used for validation errors (e.g. if an image cannot be formatted or mandatory fields are missing in the payload).
    HTTP status code  | 500 Internal Server Error | Tells the client something happened on the server and their request by itself was perfectly valid. The client can continue and try again with the request without modification.
    Response Body     | Request results, if any   | JSON format.

    ### Errors

    Error responses contain a 4xx or 5xx HTTP status and a body with the
    following format:

    ```json
    {
        "error": {
            "code": 190,
            "subcode": 460,
            "message": "Message describing the error", 
            "internal" {
              "exception": "message",
              "stackTrace: "..."
            }
        }
    }
    ```

    * _code_: error code
    * _subcode_: error subcode
    * _message_: error message
    * _internal_: available only on debug environment

    ### Paging

    Paging could be applied to a subset of endpoints returning a list of entries for some requests. 
    We are going to use the standard way of solving this problem by encoding the paging information in a URI query:

      /api/v1/foos?page=0&size=10
    
    A paged request will returns a paged response with the Page object envelop (see Page model).
    Below a Page response sample:

    ```json
      {
        content : [
            { ...  },
            { .... },
            ...
        ],
        first: true,
        last: false,
        size : 5,
        totalElements : 50,
        totalPages : 10,
        number : 0
      }
    ``` 

    If pagination is declared as mandatory for a rest resource, the __size__ parameter is mandatory.
    If not present an HTTP __404 Not found__ error is returned.
    If the page is not available an HTTP __404 Not found__ error is returned.

    The page number is zero-based index. If there are no results, a Page object is returned with a 0 length __content__ array.

    ### Sorting

    To have your results sorted on a particular property, add a sort URL parameter with the name of the property you want to sort the results on.
    You can control the direction of the sort by appending a "," to the the property name plus either _asc_ or _desc_. 
    
    To sort the results by more than one property, keep adding as many _sort=PROPERTY_ parameters as you need.

    Below a sort request sample:

      http://localhost:8080/api/v1/foos?page=1&size=10&sort=field1,desc&sort=field2,asc


    ### Date & Time

    As for the [OpenApi 3.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md) specification, _date_ and _date-time_ format are codified in json as string
    following [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14) definition:

      * date string:  as defined by full-date - [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)
      * date-time string: as defined by date-time - [RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)

    ### API Versioning

    Only the major version number is put in the URL. The minor version doesn't  go in, because backwards compatibility is almost always guaranteed with the same major version.


servers:
  - description: Development server
    url: http://localhost:4000/api/v1/
    
paths:
  /session:
    post:
      operationId: sessionPost
      tags:
        - Session
      summary: Login by username and password returning session with JWT token.
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        '201':
          description: Login successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          description: |
            Invalid credentials or bad parameters.
            Error code is 10. Sub codes are:
            * 1 - Invalid username or password
            * 2 - Service down
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          
  /ping:
    get:
      operationId: pingGet
      summary: Server heartbeat operation
      security: []
      responses:
        '204':
          description: Heartbeat response.

  /logo:
    get:
      operationId: logoGet
      summary: Get the main logo image
      security: []
      responses:
        '200':
          description: Logo image in PNG format
          content:
            image/*:
              schema:
                type: string
                format: binary

  /scoreboard/status:
    get:
      operationId: scoreboardStatusGet
      summary: Return the scoreboard status (points, set, timeouts). 
      security: []
      responses:
        '200':
          description: The current scoreboard status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreboardStatus'
              example:   # Sample object
                home:
                  points: 10
                  sets: 1
                  timeouts: 1
                  videoCheks: 0
                away:
                  points: 15
                  sets: 2
                  timeouts: 0
                  videoCheks: 0
                
    put:
      operationId: scoreboardStatusPut
      summary: Update scoreboard status (points, set, timeouts).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreboardStatus'
        required: true
      responses:
        '200':
          description: The new scoreboard status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreboardStatus'
              example:   # Sample object
                home:
                  points: 10
                  sets: 1
                  timeouts: 1
                  videoCheks: 0
                away:
                  points: 15
                  sets: 2
                  timeouts: 0
                  videoCheks: 0
        '400':
          description: |
            Invalid request.
            Error code is 20. Sub codes are:
            * 1 - Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid session

  /scoreboard/prefs:
    get:
      operationId: scoreboardPrefsGet
      summary: Return the scoreboard preferences (colors, team names). 
      security: []
      responses:
        '200':
          description: The current scoreboard preferences.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreboardPrefs'
              example:   # Sample object
                bg: "#00FF00"
                fg: "#000000"
                setLabel: "Sets"
                setBg: "#00FF00"
                setFg: "#000000"
                timeoutLabel: "Timeouts"
                timeoutBg: "#FF0000"
                pointBg: "#FFFFFF"
                pointFg: "#FF0000"
                homeName: "Home Team Name"
                homeBg: "#FFFFFF"
                homeFg: "#FF0000"
                awayName: "Away Team Name"
                awayBg: "#FFFFFF"
                awayFg: "#FF0000"

    put:
      operationId: scoreboardPrefsPut
      summary: Update scoreboard Prefs.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreboardPrefs'
        required: true
      responses:
        '200':
          description: The new scoreboard preferences.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreboardPrefs'
              example:   # Sample object
                bg: "#00FF00"
                fg: "#000000"
                setLabel: "Sets"
                setBg: "#00FF00"
                setFg: "#000000"
                timeoutLabel: "Timeouts"
                timeoutBg: "#FF0000"
                pointBg: "#FFFFFF"
                pointFg: "#FF0000"
                homeName: "Home Team Name"
                homeBg: "#FFFFFF"
                homeFg: "#FF0000"
                awayName: "Away Team Name"
                awayBg: "#FFFFFF"
                awayFg: "#FF0000"
        '400':
          description: |
            Invalid request.
            Error code is 30. Sub codes are:
            * 1 - Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Invalid session

    delete:
      operationId: scoreboardPrefsDelete
      summary: Reset scoreboard Prefs to defaults value.
      responses:
        '200':
          description: The default scoreboard preferences.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreboardPrefs'
        '401':
          description: Invalid session

  /scoreboard/prefs/default:
    get:
      operationId: scoreboardPrefsDefaultGet
      summary: Return the default scoreboard preferences (colors, team names). 
      security: []
      responses:
        '200':
          description: The default scoreboard preferences.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScoreboardPrefs'

components:
  # Security Scheme
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      description: Token Authentication using JWT
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  # Schemas         
  schemas:

    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
        - error
        
    Error:
      type: object
      properties:
        code:
          type: integer
        subcode:
          type: integer
        message:
          type: string
        internal:
          type: string
      required:
        - code
        - subcode
        - message

    Credentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
      required:
        - username
        - password

    Session:
      type: object
      properties:
        username:
          type: string
          description: Session username.
        token:
          type: string
          description: JWT session token.
        expiresIn:
          type: integer
          description: JWT token expiry timeout in seconds.
      required:
        - username
        - token

    ScoreboardTeamStatus:
      type: object
      properties:
        points:
          type: integer
          description: Points.
          default: 0
        sets:
          type: integer
          description: Won sets.
          default: 0
        timeouts:
          type: integer
          description: Timeouts.
          default: 0
        videoChecks:
          type: integer
          description: Video checks.
          default: 0
      required:
        - points
        - sets
        - timeouts
        - videoChecks
    
    TeamBallOwner:
      type: string
      description: Team ball owner
      enum:
        - none
        - home
        - away

    ScoreboardStatus:
      type: object
      description: Scoreboard team points, sents, timeouts video check.
      properties:
        home:
          $ref: '#/components/schemas/ScoreboardTeamStatus'
        away:
          $ref: '#/components/schemas/ScoreboardTeamStatus'
        ballOwner:
          $ref: '#/components/schemas/TeamBallOwner'
      required:
        - home
        - away
        - ballOwner

    ScoreboardPrefs:
      type: object
      properties:
        bg:
          type: string
          format: color
          description: Background scoreboard color.
          default: "#102030"
        fg:
          type: string
          format: color
          description: Foreground scoreboard color.
          default: "#FFFFFF"
        showHeader:
          type: boolean
          description: Show scoreboard header with logo.
          default: true
        setName:
          type: string
          description: Set label text.
          default: "Set"
        setBg:
          type: string
          format: color
          description: Set label background color.
          default: "#0B3060"
        setFg:
          type: string
          format: color
          description: Set label foreground color.
          default: "#FFFFFF"
        timeoutName:
          type: string
          description: Timeouts label text.
          default: "Timeout"
        timeoutBg:
          type: string
          format: color
          description: Timeouts background color.
          default: "#FF0000"
        videoCheckName:
          type: string
          description: Video checks label text.
          default: "Video Check"
        videoCheckBg:
          type: string
          format: color
          description: Video checks background color.
          default: "#FF0000"
        pointBg:
          type: string
          format: color
          description: Points background color.
          default: "#0B3060"
        pointFg:
          type: string
          format: color
          description: Points foreground color.
          default: "#FFFFFF"
        homeName:
          type: string
          description: Home team name.
          default: "HOME"
        homeBg:
          type: string
          format: color
          description: Home team background color.
          default: "#10B090"
        homeFg:
          type: string
          format: color
          description: Home team foreground color.
          default: "#FFFFFF"
        awayName:
          type: string
          description: Away team name.
          default: "AWAY"
        awayBg:
          type: string
          format: color
          description: Away team background color.
          default: "#20C0F0"
        awayFg:
          type: string
          format: color
          description: Away team foreground color.
          default: "#EEFF88"
      required:
        - bg
        - fg
        - showHeader
        - setName
        - setBg
        - setFg
        - timeoutName
        - timeoutBg
        - videoCheckName
        - videoCheckBg
        - pointBg
        - pointFg
        - homeName
        - homeBg
        - homeFg
        - awayName
        - awayFg
        - awayBg

    ScoreboardMessage:
      type: object
      description: Scoreboard websocket message
      properties:
        status:
          $ref: '#/components/schemas/ScoreboardStatus'
        prefs:
          $ref: '#/components/schemas/ScoreboardPrefs'


# Apply the security globally to all operations       
security: 
  - bearerAuth: []          
          
